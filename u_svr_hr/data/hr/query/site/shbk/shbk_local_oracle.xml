<?xml version="1.0" encoding="UTF-8"?>
<sqlMap>
	<URL></URL>
	<DATABASE>oracle</DATABASE>
	<HOSTNAME>10.0.55.114</HOSTNAME>
	<DBNAME>ecsdb</DBNAME>
	<DBUSER>euc</DBUSER>
	<DBPASSWORD>RpEqTVZ6o+p2lP0cEO2T2w==</DBPASSWORD>
	<DBPORT>1521</DBPORT>
	
	<!--  원격지 DB 조회 후, 로컬 DB에 Insert 처리시 사용 -->
	<INSERT_HR_DEPT>
		<![CDATA[
			INSERT INTO EUC.HR_DEPT (SITE, SITE_NM, TENANT, TENANT_NM, DEPT_NM, DEPT_CODE, DEPT_PARENT_CODE, ABBR_NM, BRANCH_CODE, NAME_TREE, CODE_TREE, UPDATETIME) VALUES
			(
				#SITE#<STRING>, #SITE_NM#<STRING>, #TENANT#<STRING>, #TENANT_NM#<STRING>, #DEPT_NM#<STRING>, #DEPT_CODE#<STRING>, #DEPT_PARENT_CODE#<STRING>, 
				#ABBR_NM#<STRING>, #BRANCH_CODE#<STRING>, #NAME_TREE#<STRING>, #CODE_TREE#<STRING>, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') 
			)
		]]>
	</INSERT_HR_DEPT>
	<DELETE_HR_DEPT><![CDATA[	DELETE FROM EUC.HR_DEPT  ]]>	</DELETE_HR_DEPT>
	<INSERT_HR_GRADE>
		<![CDATA[
			INSERT INTO EUC.HR_GRADE (SITE, SITE_NM, TENANT, TENANT_NM, GRADE_NM, GRADE_CODE, UPDATETIME) VALUES
			(
				#SITE#<STRING>, #SITE_NM#<STRING>, #TENANT#<STRING>, #TENANT_NM#<STRING>, #GRADE_NM#<STRING>, #GRADE_CODE#<STRING>, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
			)
		]]>
	</INSERT_HR_GRADE>
	<DELETE_HR_GRADE><![CDATA[	DELETE FROM EUC.HR_GRADE  ]]>	</DELETE_HR_GRADE>
	<INSERT_HR_POSITION>
		<![CDATA[
			INSERT INTO EUC.HR_POSITION (SITE, SITE_NM, TENANT, TENANT_NM, POSITION_NM, POSITION_CODE, UPDATETIME) VALUES
			(
				#SITE#<STRING>, #SITE_NM#<STRING>, #TENANT#<STRING>, #TENANT_NM#<STRING>, #POSITION_NM#<STRING>, #POSITION_CODE#<STRING>, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
			)
		]]>
	</INSERT_HR_POSITION>
	<DELETE_HR_POSITION><![CDATA[	DELETE FROM EUC.HR_POSITION  ]]>	</DELETE_HR_POSITION>
	<INSERT_HR_USER>
		<![CDATA[
			INSERT INTO EUC.HR_USER (USER_NO, USER_NM, SITE, SITE_NM, TENANT, TENANT_NM, DEPT_CODE, GRADE_CODE, POSITION_CODE, DIRECT_NUMBER, MOBILE, DN, UPDATETIME) VALUES
			(
				#USER_NO#<STRING>, #USER_NM#<STRING>, #SITE#<STRING>, #SITE_NM#<STRING>, #TENANT#<STRING>, #TENANT_NM#<STRING>, 
				#DEPT_CODE#<STRING>, #GRADE_CODE#<STRING>, #POSITION_CODE#<STRING>, 
				#DIRECT_NUMBER#<STRING>, #MOBILE#<STRING>, #DN#<STRING>, TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD')
			)
		]]>
	</INSERT_HR_USER>
	<DELETE_HR_USER><![CDATA[	DELETE FROM EUC.HR_USER  ]]>	</DELETE_HR_USER>

	<!-- 로컬 DB를 읽어서 처리를 위한 시작 -->
	<GET_SOURCE_HR_DEPT>
		<![CDATA[
			WITH DeptTree (
				SITE,
				SITE_NM,
				TENANT,
				TENANT_NM,
				DEPT_NM,
				DEPT_CODE,
				ABBR_NM,
				DEPT_PARENT_CODE,
				BRANCH_CODE,
				NAME_TREE,
				CODE_TREE,
				"LEVEL"
			) AS (
			  -- 1) 최상위(루트) 부서
			  SELECT
				D.SITE,
				D.SITE_NM,
				D.TENANT,
				D.TENANT_NM,
				D.DEPT_NM,
				D.DEPT_CODE,
				D.ABBR_NM,
				D.DEPT_PARENT_CODE,
				D.BRANCH_CODE,
				D.NAME_TREE,
				D.CODE_TREE,
				1 AS "LEVEL"
			  FROM EUC.HR_DEPT D
			  WHERE D.DEPT_PARENT_CODE IS NULL
			  UNION ALL
			  -- 2) 재귀 단계: 자식 부서를 연결
			  SELECT
				D.SITE,
				D.SITE_NM,
				D.TENANT,
				D.TENANT_NM,
				D.DEPT_NM,
				D.DEPT_CODE,
				D.ABBR_NM,
				D.DEPT_PARENT_CODE,
				D.BRANCH_CODE,
				DT.NAME_TREE || '‡' || D.DEPT_NM    	AS NAME_TREE,
				DT.CODE_TREE || '‡' || D.DEPT_CODE   	AS CODE_TREE,
				DT."LEVEL" + 1                         	AS "LEVEL"
			  FROM EUC.HR_DEPT D
			  JOIN DeptTree DT
				ON D.DEPT_PARENT_CODE = DT.DEPT_CODE
			)
			SELECT
			  SITE,
			  SITE_NM,
			  TENANT,
			  TENANT_NM,
			  DEPT_NM,
			  DEPT_CODE,
			  DEPT_PARENT_CODE,
			  ABBR_NM,
			  BRANCH_CODE,
			  NAME_TREE,
			  CODE_TREE,
			  "LEVEL"
			FROM DeptTree
			ORDER BY "LEVEL", CODE_TREE
		]]>
	</GET_SOURCE_HR_DEPT>	
	<GET_SOURCE_HR_GRADE>
		<![CDATA[
			SELECT 
				HG.SITE					as SITE, 	
			 	HG.SITE_NM				as SITE_NM, 
			 	HG.TENANT				as TENANT, 	
			 	HG.TENANT_NM			as TENANT_NM, 
				HG.GRADE_NM 			as GRADE_NM,
				HG.GRADE_CODE 			as GRADE_CODE
			FROM EUC.HR_GRADE HG
		]]>
	</GET_SOURCE_HR_GRADE>
	<!--
	<GET_SOURCE_HR_POSITION>
		<![CDATA[
			SELECT 
				HP.SITE					as SITE, 	
			 	HP.SITE_NM				as SITE_NM, 
			 	HP.TENANT				as TENANT, 	
			 	HP.TENANT_NM			as TENANT_NM, 
				HP.POSITION_NM 			as POSITION_NM,
				HP.POSITION_CODE 		as POSITION_CODE
			FROM EUC.HR_POSITION HP
		]]>
	</GET_SOURCE_HR_POSITION>
	-->
	<GET_SOURCE_HR_USER>
		<![CDATA[
			SELECT
				HU.user_no 							AS USER_NO,
				HU.user_nm 							AS USER_NM,
				HU.site								AS SITE,
			 	HU.site_nm							AS SITE_NM,
			 	HU.tenant							AS TENANT,
			 	HU.tenant_nm						AS TENANT_NM,
				HU.dept_code						AS DEPT_CODE,
				HU.grade_code 						AS GRADE_CODE,
				HU.position_code					AS POSITION_CODE,
                'ACTIVE'							AS USER_STATE_CODE,
				REGEXP_REPLACE(HU.direct_number, '[^0-9]')  	AS DIRECT_NUMBER,
  				REGEXP_REPLACE(HU.mobile,        '[^0-9]')  	AS MOBILE,
  				REGEXP_REPLACE(HU.dn,            '[^0-9]')  	AS DN,
				'Y' 											AS MCID_FL,
				'Y'												AS PIC_FL
			FROM EUC.HR_USER HU
		]]>
	</GET_SOURCE_HR_USER>
	
	<!-- 
	******************************************************************	
	*                                                                	
	*                     이하 공통 처리 함수                            
	*                                                                	
	******************************************************************	
	-->
	<!--  SITE 처리	: SITE의 경우, 서버에 코드값이 존재하지 않음으로 이름으로 처리 -->
	<MERGE_SITE>
		<![CDATA[
			MERGE INTO ESP_CORE.U_SITE tgt
			USING (
			  SELECT
				#SITE#<STRING>   	AS SITE,     -- 바인드 변수 또는 실제 값 바꿔서 사용
				#SITE_NM#<STRING> 	AS SITE_NM
			  FROM DUAL
			) src
			ON (tgt.SITE = src.SITE)
			WHEN MATCHED THEN
			  UPDATE SET
				tgt.VIEW_FL = 'Y'
			WHEN NOT MATCHED THEN
			  INSERT (
				ID,
				SITE,
				SITE_NM,
				CTI_TYPE,
				CTI_VER,
				ERS_SCHEMA,
				SITE_ORD,
				VIEW_FL,
				PSDUAL_FL,
				SOLUTION_TYPE,
				CTI_CONNSTR,
				EMC_FL
			  )
			  VALUES (
				ESP_CORE.U_SITE_ID_SEQ.NEXTVAL,       -- 시퀀스 NEXTVAL
				src.SITE,
				src.SITE_NM,
				NULL,                        -- CTI_TYPE
				NULL,                        -- CTI_VER
				NULL,                        -- ERS_SCHEMA
				(SELECT COALESCE(MAX(SITE_ORD), 0) + 1 FROM ESP_CORE.U_SITE),
				'Y',                         -- VIEW_FL
				NULL,                        -- PSDUAL_FL
				'ESP-u',                     -- SOLUTION_TYPE
				NULL,                        -- CTI_CONNSTR
				'N'                          -- EMC_FL
			  )
		]]>
	</MERGE_SITE>	
	<DISABLE_SITE>	<![CDATA[	UPDATE ESP_CORE.U_SITE SET VIEW_FL = 'N'		]]>	</DISABLE_SITE>	
	
	<!--  TENANT 처리	 : TENANT의 경우, 서버에 코드값이 존재하지 않음으로 이름으로 처리 -->
	<MERGE_TENANT>
		<![CDATA[
			MERGE INTO ESP_CORE.U_TENANT tgt
			USING (
			  SELECT
				(SELECT ID FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING>)	AS SITE_ID,
				#TENANT#<STRING>    	AS TENANT,
				#TENANT_NM#<STRING> 	AS TENANT_NM
			  FROM DUAL
			) src
			ON (
			  tgt.SITE_ID = src.SITE_ID AND tgt.TENANT  = src.TENANT
			)
			WHEN MATCHED THEN
				UPDATE SET tgt.VIEW_FL = 'Y'
			WHEN NOT MATCHED THEN
			INSERT (
				ID,
				SITE_ID,
				TENANT,
				TENANT_NM,
				DESCRIPTION,
				TENANT_ORD,
				VIEW_FL
			  )
			  VALUES (
				ESP_CORE.U_TENANT_ID_SEQ.NEXTVAL,     -- 시퀀스 NEXTVAL
				src.SITE_ID,                 -- 서브쿼리에서 조회한 SITE_ID
				src.TENANT,                  -- '#tenant#'
				src.TENANT_NM,               -- '#tenant_nm#'
				src.TENANT_NM,               -- DESCRIPTION도 '#tenant_nm#'과 동일
				(
				  	SELECT NVL(MAX(TENANT_ORD), 0) + 1
					FROM ESP_CORE.U_TENANT
				),                           -- TENANT_ORD = 현재 최대 + 1
				'Y'                          -- VIEW_FL
			  )
		]]>
	</MERGE_TENANT>
	<DISABLE_TENANT>	<![CDATA[	UPDATE ESP_CORE.U_TENANT SET VIEW_FL = 'N'		]]>	</DISABLE_TENANT>	

	<!--	DEPT 처리	-->
	<DISABLE_DEPT>		<![CDATA[	UPDATE ESP_CORE.U_DEPT SET USE_FL = 'N'			]]>	</DISABLE_DEPT>
	<GET_CURRENT_DEPT>
        <![CDATA[
        	SELECT SITE_ID, SITE, SITE_NM, TENANT_ID, TENANT, TENANT_NM, DEPT_ID, DEPT_NM, BRANCH_CODE, DEPT_CODE, PARENT_ID, NAME_TREE, CODE_TREE, DEPTH FROM EUC.DEPT_V		
        ]]>	
    </GET_CURRENT_DEPT>
   	<GET_DEPT>	<!-- DEPT_CODE: 사이트(기간계) 부서 코드 값 -->
        <![CDATA[	
        	SELECT SITE_ID, TENANT_ID, DEPT_ID, DEPT_NM, DEPT_CODE, PARENT_ID, CODE_TREE, BRANCH_CODE FROM EUC.DEPT_V WHERE SITE = #site#<string> AND TENANT = #tenant#<string> AND DEPT_CODE = #DEPT_CODE#<string>
        ]]>
    </GET_DEPT>		
	<INSERT_DEPT>
		<![CDATA[
			INSERT INTO ESP_CORE.U_DEPT (ID, TENANT_ID, DEPT_NM, DEPT_CODE, ABBR_NM, BRANCH_CODE, DEPT_ORD, PARENT_ID, USE_FL, REG_ID, REG_DT)
			VALUES
			(
				ESP_CORE.U_DEPT_ID_SEQ.NEXTVAL,   -- 시퀀스 NEXTVAL
			  	(
			  		SELECT NT.ID FROM ESP_CORE.U_TENANT NT
				  	JOIN ESP_CORE.U_SITE  NS ON NS.ID = NT.SITE_ID WHERE NS.SITE   = #site#<STRING> AND NT.TENANT = #tenant#<STRING>
			  	),
			  	#DEPT_NM#<STRING>,       -- 바인드 변수 또는 실제 값
			  	#DEPT_CODE#<STRING>,     -- 바인드 변수 또는 실제 값
			  	#ABBR_NM#<STRING>,       -- 바인드 변수 또는 실제 값
			  	#BRANCH_CODE#<STRING>,   -- 바인드 변수 또는 실제 값
			  	(
					SELECT NVL(MAX(DEPT_ORD), 0) + 1 FROM ESP_CORE.U_DEPT
			  	),
			  	#PARENT_ID#<INT>,     -- 바인드 변수 또는 실제 값
			  	'Y',
			  	'SYSTEM',
			  	CURRENT_TIMESTAMP
			)
		]]>
	</INSERT_DEPT>
	<UPDATE_DEPT>	<!--  BRANCH_CODE : 점코드, ABBR_NM은 갱신하지 않고, 웹에서 변경하도록함 -->
		<![CDATA[
			UPDATE ESP_CORE.U_DEPT SET 
				USE_FL   	= 'Y',
				DEPT_NM   	= #DEPT_NM#<STRING>,
                BRANCH_CODE = #BRANCH_CODE#<STRING>,
                PARENT_ID 	= #PARENT_ID#<INT>,
                REG_ID 		= 'SYSTEM',
                REG_DT 		= CURRENT_TIMESTAMP
			WHERE TENANT_ID = (SELECT ID FROM ESP_CORE.U_TENANT UT  WHERE UT.SITE_ID = (SELECT ID FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING>) AND UT.TENANT  = #TENANT#<STRING>) AND DEPT_CODE = #DEPT_CODE#<STRING>
		]]>
	</UPDATE_DEPT>

	<!--  GRADE 처리	-->
	<MERGE_GRADE>
		<![CDATA[
			MERGE INTO ESP_CORE.U_GRADE TGT
			USING (
				SELECT
					(SELECT ID FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING>)        AS SITE_ID,
					#GRADE_NM#<STRING>                     AS GRADE_NM,
					#GRADE_CODE#<STRING>                   AS GRADE_CODE
			  	FROM DUAL
			) SRC
			ON (
				 TGT.SITE_ID = SRC.SITE_ID AND TGT.GRADE_NM = SRC.GRADE_NM AND TGT.GRADE_CODE = SRC.GRADE_CODE
			)
			WHEN MATCHED THEN
			UPDATE SET
				TGT.USE_FL  = 'Y', TGT.REG_ID = 'SYSTEM', TGT.REG_DT = CURRENT_TIMESTAMP
			WHEN NOT MATCHED THEN
			INSERT (
				ID, GRADE_NM, GRADE_ORD, SITE_ID, USE_FL, GRADE_CODE
			)
			VALUES (
				ESP_CORE.U_GRADE_ID_SEQ.NEXTVAL,
				SRC.GRADE_NM,
				(
					SELECT NVL(MAX(GRADE_ORD), 0) + 1 FROM ESP_CORE.U_GRADE WHERE SITE_ID = SRC.SITE_ID
				),
				SRC.SITE_ID,
				'Y',
				SRC.GRADE_CODE
			)
		]]>
	</MERGE_GRADE>
	<DISABLE_GRADE>		<![CDATA[	UPDATE ESP_CORE.U_GRADE SET USE_FL = 'N'	]]> </DISABLE_GRADE>

	<!--  POSITION 처리	-->
	<!--
	<MERGE_POSITION>
		<![CDATA[
			MERGE INTO ESP_CORE.U_POSITION TGT
			USING (
				SELECT
					(SELECT ID FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING>)            AS SITE_ID,
					#POSITION_NM#<STRING>                     AS POSITION_NM,
					#POSITION_CODE#<STRING>                   AS POSITION_CODE
			  	FROM DUAL
			) SRC
			ON (
				TGT.SITE_ID = SRC.SITE_ID AND TGT.POSITION_NM = SRC.POSITION_NM AND TGT.POSITION_CODE  = SRC.POSITION_CODE
			)
			WHEN MATCHED THEN
			UPDATE SET
				TGT.USE_FL       = 'Y'
			WHEN NOT MATCHED THEN
			INSERT ( ID, POSITION_NM, POSITION_ORD, SITE_ID, USE_FL, POSITION_CODE)
			VALUES (
				ESP_CORE.U_POSITION_ID_SEQ.NEXTVAL,
				SRC.POSITION_NM,
				(
					SELECT NVL(MAX(POSITION_ORD), 0) + 1 FROM ESP_CORE.U_POSITION WHERE SITE_ID = SRC.SITE_ID
				),
				SRC.SITE_ID,
				'Y',
				SRC.POSITION_CODE
			)
		]]>
	</MERGE_POSITION>
	<DISABLE_POSITION>		<![CDATA[	UPDATE ESP_CORE.U_POSITION SET USE_FL = 'N'	]]> </DISABLE_POSITION>
	-->

	<!--  USER(사용자 처리 관련 필드) -->
	<MERGE_USER>
		<![CDATA[
			MERGE INTO ESP_CORE.U_USER TGT
			USING (
			 	SELECT
					#USER_NO#<STRING> AS USER_NO,
					#USER_NM#<STRING> AS USER_NM,
					(SELECT ID FROM ESP_CORE.U_SITE WHERE SITE_NM = #SITE_NM#<STRING> AND VIEW_FL = 'Y') AS SITE_ID,
					(SELECT ID FROM ESP_CORE.U_TENANT WHERE SITE_ID = (SELECT ID  FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING> AND VIEW_FL = 'Y') AND TENANT = #TENANT#<STRING> AND VIEW_FL = 'Y') AS TENANT_ID,
					(SELECT ID FROM ESP_CORE.U_DEPT WHERE DEPT_CODE = #DEPT_CODE#<STRING> AND USE_FL = 'Y') AS DEPT_ID,
					(
						SELECT UG.ID FROM ESP_CORE.U_GRADE UG
						JOIN ESP_CORE.U_SITE US ON UG.SITE_ID = US.ID
				 	 	WHERE UG.GRADE_CODE = #GRADE_CODE#<STRING> AND UG.USE_FL = 'Y' AND US.SITE = #SITE#<STRING>
				 	 ) AS GRADE_ID,
					(
						SELECT UP.ID FROM ESP_CORE.U_POSITION UP
				   		JOIN ESP_CORE.U_SITE US ON UP.SITE_ID = US.ID
				  		WHERE UP.POSITION_CODE = #POSITION_CODE#<STRING> AND UP.USE_FL = 'Y' AND US.SITE = #SITE#<STRING>
				  	) AS POSITION_ID,
					#DN#<STRING>            AS DN,
					#MOBILE#<STRING>        AS MOBILE,
					#DIRECT_NUMBER#<STRING> AS DIRECT_NUMBER,
					#USER_STATE_CD#<STRING> AS USER_STATE_CD
			  FROM DUAL
			) SRC
			ON (TGT.USER_NO = SRC.USER_NO)
			WHEN MATCHED THEN
			  UPDATE SET
				TGT.USER_NM        = SRC.USER_NM,
				TGT.SITE_ID        = SRC.SITE_ID,
				TGT.TENANT_ID      = SRC.TENANT_ID,
				TGT.DEPT_ID        = SRC.DEPT_ID,
				TGT.GRADE_ID       = SRC.GRADE_ID,
				TGT.POSITION_ID    = SRC.POSITION_ID,
				TGT.DN             = SRC.DN,
				TGT.MOBILE         = SRC.MOBILE,
				TGT.DIRECT_NUMBER  = SRC.DIRECT_NUMBER,
				TGT.USE_FL         = 'Y',
				TGT.USER_STATE_CD  = SRC.USER_STATE_CD,
				TGT.EDIT_ID        = 'SYSTEM',
				TGT.EDIT_DT        = CURRENT_TIMESTAMP
			WHEN NOT MATCHED THEN
			  INSERT (
				ID,
				USER_NO,
				USER_NM,
				GRADE_ID,
				POSITION_ID,
				SITE_ID,
				TENANT_ID,
				DEPT_ID,
				DN,
				MOBILE,
				DIRECT_NUMBER,
				USER_STATE_CD,
				USE_FL,
				REG_ID,
				REG_DT
			  )
			  VALUES (
				ESP_CORE.U_USER_ID_SEQ.NEXTVAL,
				SRC.USER_NO,
				SRC.USER_NM,
				SRC.GRADE_ID,
				SRC.POSITION_ID,
				SRC.SITE_ID,
				SRC.TENANT_ID,
				SRC.DEPT_ID,
				SRC.DN,
				SRC.MOBILE,
				SRC.DIRECT_NUMBER,
				SRC.USER_STATE_CD,
				'Y',
				'SYSTEM',
				CURRENT_TIMESTAMP
			  )
		]]>
	</MERGE_USER>
	<DISABLE_USER>	<![CDATA[	UPDATE ESP_CORE.U_USER SET USE_FL = 'N'	]]>	</DISABLE_USER>
	
	<!-- Member 테이블 갱신 -->
	<MERGE_MEMBER>
		<![CDATA[
			MERGE INTO ESP_CORE.U_MEMBER tgt
			USING (
  				SELECT #user_no#<STRING> AS LOGIN_ID
   	 			FROM DUAL
			) src
			ON (tgt.LOGIN_ID = src.LOGIN_ID)
			WHEN MATCHED THEN
			  UPDATE SET
				tgt.USER_ID   = (
				  SELECT ID
					FROM ESP_CORE.U_USER
				   WHERE USER_NO = #user_no#<STRING>
				),
				tgt.DEPT_ID   = (
				  SELECT DEPT_ID
					FROM ESP_CORE.U_USER
				   WHERE USER_NO = #user_no#<STRING>
				),
				tgt.EDIT_ID   = 'SYSTEM',
				tgt.EDIT_DT   = CURRENT_TIMESTAMP
			WHEN NOT MATCHED THEN
			  INSERT (
				ID,
				LOGIN_ID,
				LOGIN_NM,
				LOGIN_PWD,
				MEMBER_STATE_CD,
				AUTH_ID,
				USER_ID,
				DEPT_ID,
				REG_ID,
				REG_DT
			  )
			  VALUES (
				ESP_CORE.U_MEMBER_ID_SEQ.NEXTVAL,
				#user_no#<STRING>,
				#user_nm#<STRING>,
				#user_pw#<STRING>,
				'ACTIVE',
				(
				  SELECT ID
					FROM (
					  SELECT ID
						FROM ESP_CORE.U_AUTH
					   WHERE AUTH_NM LIKE '%일반사용자%'
					   ORDER BY ID
					)
				   WHERE ROWNUM = 1
				),
				(
				  SELECT ID
					FROM ESP_CORE.U_USER
				   WHERE USER_NO = #user_no#<STRING>
				),
				(
				  SELECT DEPT_ID
					FROM ESP_CORE.U_USER
				   WHERE USER_NO = #user_no#<STRING>
				),
				'SYSTEM',
				CURRENT_TIMESTAMP
			  )
		]]>
	</MERGE_MEMBER>	

	<!--  U_USER 테이블에서 삭제처리된 사용자에 대해서 계정 잠금 U_MEMBER 테이블의 MEMBER_STATE_CD의 상태를 DEL로 변경 -->
	<DEL_MEMBER_STATE>	
		<![CDATA[  
			UPDATE ESP_CORE.U_MEMBER SET MEMBER_STATE_CD = 'DELETED'
			WHERE LOGIN_ID  IN ( SELECT USER_NO FROM ESP_CORE.U_USER WHERE USE_FL = 'N')
		]]>
	</DEL_MEMBER_STATE>
	
	<!--  U_MEMBER 테이블을 이용해서 U_USER의 LOGIN_FL값 갱신 -->
	<UPDATE_USER_LOGIN_FL>
		<![CDATA[  
			UPDATE ESP_CORE.U_USER SET LOGIN_FL = 'Y'
			WHERE ID IN ( SELECT USER_ID FROM ESP_CORE.U_MEMBER WHERE USER_ID IS NOT NULL )
		]]>
	</UPDATE_USER_LOGIN_FL>
	
	<!--  ESP_UC 스키마의 서비스 정보 갱신	-->
	<MERGE_USER_SERVICE>
		<![CDATA[  
			MERGE INTO ESP_UC.U_USER_SERVICE TGT
			USING (
				SELECT
					(SELECT ID FROM ESP_CORE.U_SITE WHERE SITE = #SITE#<STRING>) AS SITE_ID,
					#USER_NO#<STRING> 			AS USER_NO,
					#MCID_FL#<STRING>          	AS MCID_FL,
					#PIC_FL#<STRING>           	AS PIC_FL
			  	FROM DUAL
			) SRC
			ON (TGT.USER_NO = SRC.USER_NO AND TGT.SITE_ID = SRC.SITE_ID)
			WHEN MATCHED THEN
			UPDATE SET
				TGT.MCID_FL   = SRC.MCID_FL,
				TGT.PIC_FL    = SRC.PIC_FL,
				TGT.EDIT_ID   = 'SYSTEM',
				TGT.EDIT_DT   = CURRENT_TIMESTAMP
			WHEN NOT MATCHED THEN
			INSERT (
				ID,
				SITE_ID,
				USER_NO,
				MCID_FL,
				PIC_FL,
				REG_ID,
				REG_DT
			)
			VALUES (
				ESP_UC.U_USER_SERVICE_ID_SEQ.NEXTVAL,
				SRC.SITE_ID,
				SRC.USER_NO,
				SRC.MCID_FL,
				SRC.PIC_FL,
				'SYSTEM',
				CURRENT_TIMESTAMP
			)
		]]>
	</MERGE_USER_SERVICE>
	
	<!-- Postgres의 경우 해당 코드가 소스에 존재하기 때문에 아래 INSERT_BATCH, UPDATE_BULK 항목은 불필요함 -->
	<INSERT_BATCH>
		<![CDATA[	
			INSERT INTO ESP_UC.E_BATCHWORK (ID, APP_URL, REQ_USER, STATUS, TITLE, DESCRIPTION, RESULT, CAUSE, YMD, REQ_DT)
			VALUES 
			(
				ESP_UC.E_BATCHWORK_ID_SEQ.NEXTVAL
				#REQ_URL#<STRING>, #REQ_USER#<STRING>, #STATUS#<STRING>, #TITLE#<STRING>, #DESCRIPTION#<STRING>, #RESULT#<STRING>, #CAUSE#<STRING>,
				CURRENT_DATE, CURRENT_TIMESTAMP
			)
		]]>
	</INSERT_BATCH>
	<UPDATE_BULK>
		<![CDATA[
			MERGE INTO ESP_UC.E_BULKWORK tgt
			USING (
				SELECT
					#TOKEN#<STRING>       				AS TOKEN,
					#REQ_URL#<STRING>             		AS APP_URL,
					#REQ_URL#<STRING>             		AS REQ_URL,
					#REQ_USER#<STRING>              	AS REQ_USER,
					#REQ_DATA#<STRING>    				AS REQ_DATA,
					#STATUS#<STRING>                	AS STATUS,
					#TITLE#<STRING>                	 	AS TITLE,
					#DESCRIPTION#<STRING>           	AS DESCRIPTION,
					#FILE_NM#<STRING>    				AS FILE_NM,
					#RESULT#<STRING>                	AS RESULT,
					#CAUSE#<STRING>                		AS CAUSE,
					CURRENT_TIMESTAMP               	AS CMPLT_DT,
					CURRENT_TIMESTAMP               	AS REQ_DT
				FROM DUAL
			) src
			ON (tgt.TOKEN = src.TOKEN)
			WHEN MATCHED THEN
				UPDATE SET
					tgt.STATUS      = src.STATUS,
					tgt.TITLE       = src.TITLE,
					tgt.DESCRIPTION = src.DESCRIPTION,
					tgt.FILE_NM     = src.FILE_NM,
					tgt.RESULT      = src.RESULT,
					tgt.CAUSE       = src.CAUSE,
					tgt.CMPLT_DT    = src.CMPLT_DT
			WHEN NOT MATCHED THEN
				INSERT (
					ID,
					TOKEN,
					APP_URL,
					REQ_URL,
					REQ_USER,
					REQ_DATA,
					STATUS,
					TITLE,
					DESCRIPTION,
					FILE_NM,
					RESULT,
					CAUSE,
					CMPLT_DT,
					REQ_DT
				)
				VALUES (
					ESP_UC.E_BULKWORK_ID_SEQ.NEXTVAL,
					src.TOKEN,
					src.APP_URL,
					src.REQ_URL,
					src.REQ_USER,
					src.REQ_DATA,
					src.STATUS,
					src.TITLE,
					src.DESCRIPTION,
					src.FILE_NM,
					src.RESULT,
					src.CAUSE,
					src.CMPLT_DT,
					src.REQ_DT
				)
		]]>
	</UPDATE_BULK>
</sqlMap>